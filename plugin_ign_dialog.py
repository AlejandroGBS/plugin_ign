# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PluginIGNDialog
                                 A QGIS plugin
 Plugin para cargar los servicios del IGN / CNIG
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Alejandro Garcia Barroso
        email                : alejandro.garcia@cnig.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPalette, QColor, QFontMetrics, QPixmap
from PyQt5.QtWidgets import QStyle, QDialogButtonBox, QDialog, QApplication

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'plugin_ign_dialog_base.ui'))


class PluginIGNDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(PluginIGNDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.ui = self
        
        self.label_info.setScaledContents(True) 
        
        self.label_banner.setScaledContents(True)        
        self.label_banner.setAlignment(Qt.AlignCenter)
        self.pixmap_banner = QPixmap(self.label_banner.pixmap())
        self.resizeBanner()

    def resizeEvent(self, newSize):
        self.resizeBanner()

    def resizeBanner(self):
        self.label_banner.resize(self.width(), self.height()/2)
        self.label_info.resize(self.width() -52, self.height()/2 -10)
        self.label_info.move(26, self.height()/2)
